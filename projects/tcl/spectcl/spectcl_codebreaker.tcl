# spectcl_codebreaker.tcl --
#
# UI generated by GUI Builder Build 146 on 2015-09-15 18:55:14 from:
#    C:/Users/Public/archive/github/codebreaker/projects/tcl/spectcl/spectcl_codebreaker.ui
# This file is auto-generated.  Only the code within
#    '# BEGIN USER CODE'
#    '# END USER CODE'
# and code inside the callback subroutines will be round-tripped.
# The proc names 'ui' and 'init' are reserved.
#

package require Tk 8.4

# Declare the namespace for this dialog
namespace eval spectcl_codebreaker {}

# Source the ui file, which must exist
set spectcl_codebreaker::SCRIPTDIR [file dirname [info script]]
source [file join $spectcl_codebreaker::SCRIPTDIR spectcl_codebreaker_ui.tcl]

# BEGIN USER CODE

 ##
 #  @fn      userinit
 #  @brief   User-defined constructor
##
proc spectcl_codebreaker::userinit {} {
    variable model 
    Model create model
 }

 ##
 #  @fn      addList
 #  @param   text Text item to be added to the list
 #  @brief   Callback to handle button_4 widget option -command
##
proc spectcl_codebreaker::addList { text } {
     # Deselect the old last entry
     ._listbox_1 selection clear end
     # Add an entry
     ._listbox_1 insert end $text
     # Scrall at the end of the list
     ._listbox_1 see end
     # mark last item
     ._listbox_1 selection set end
     return $text
}

 ##
 #  @fn      getGuess
 #  @brief   Get a guess from input field
 #  @return  Guess
##
proc spectcl_codebreaker::getGuess {} {
    # Get data from input field
    set result [._entry_1 get]
    return $result
}

 ##
 #  @fn      exitCmd
 #  @brief   Exit
##
proc spectcl_codebreaker::exitCmd {} {
    # Delete codebreaker object
    destroy
    exit
}

  ##
  #  @fn      aboutCmd
  #  @brief   About
 ##
proc spectcl_codebreaker::aboutCmd {} {
    set text \
"Codebreaker - Guess 4 secret numbers right. \
(c) Rolf Hemmerling 2015 - GNU LESSER GENERAL \
PUBLIC LICENSE Version 2.1"
    spectcl_codebreaker::addList $text
    return $text
}


 ##
 #  @fn      newGameCmd
 #  @brief   New Game
##
proc spectcl_codebreaker::newGameCmd {} {
    variable model
    model gameOver 0
     # Clear listbox
    ._listbox_1 delete 0 end
    model generateSecretnumber
    addList "New Game"
}

 ##
 #  @fn      guessCmd
 #  @brief   Guess
##
proc spectcl_codebreaker::guessCmd {} {
    variable model
    set result ""
    set guessOfPlayer [getGuess]
    if {[string length $guessOfPlayer] < 4}  {
        set result ""
    } else {
        if {[model gameOver] == 1} {
            set result ""
       } else {
 	    set codedResult [model guessSecretnumber $guessOfPlayer]
            set gameOver2 [model guessIsCorrect $guessOfPlayer]
 	    model gameOver $gameOver2
	    set result [append guessOfPlayer ": " $codedResult]
	    if {$gameOver2 == 1} {
		set result [append result " >You won!"]
            }
            addList $result
        }
    } 	 
    return $result
}

#
#
# Menu only commands
#

 ##
 #  @fn      newSelfdefinedGame
 #  @brief   New Game with User-Defined Secret Number
##
proc spectcl_codebreaker::newSelfdefinedGame {} {
     variable model secretnumber
     set secretnumber [getGuess]
     model gameOver 0
     # Clear listbox
     ._listbox_1 delete 0 end
     set text [model setSecretnumber $secretnumber]
     addList [append "Demo Game =" $text]
}

 ##
 #  @fn      hintCmd
 #  @brief   Hint
##
proc spectcl_codebreaker::hintCmd {} {
    variable model
    set result [model getSecretnumber]
    addList [append "Hint = " $result]
    return result
}
# END USER CODE class


# END USER CODE

# BEGIN CALLBACK CODE
# ONLY EDIT CODE INSIDE THE PROCS.

# spectcl_codebreaker::_button_1_command --
#
# Callback to handle _button_1 widget option -command
#
# ARGS:
#    <NONE>
#
proc spectcl_codebreaker::button1Cmd_command args {
    spectcl_codebreaker::guessCmd
}

# spectcl_codebreaker::_button_2_command --
#
# Callback to handle _button_2 widget option -command
#
# ARGS:
#    <NONE>
#
proc spectcl_codebreaker::button2Cmd_command args {
    spectcl_codebreaker::newGameCmd
}

# spectcl_codebreaker::_button_3_command --
#
# Callback to handle _button_3 widget option -command
#
# ARGS:
#    <NONE>
#
proc spectcl_codebreaker::button3Cmd_command args {
    spectcl_codebreaker::aboutCmd
}

# spectcl_codebreaker::_button_4_command --
#
# Callback to handle _button_4 widget option -command
#
# ARGS:
#    <NONE>
#
proc spectcl_codebreaker::button4Cmd_command args {
    spectcl_codebreaker::exitCmd
}

# spectcl_codebreaker::_entry_1_invalidcommand --
#
# Callback to handle _entry_1 widget option -invalidcommand
#
# ARGS:
#    <NONE>
#
proc spectcl_codebreaker::_entry_1_invalidcommand args {}

# spectcl_codebreaker::_entry_1_validatecommand --
#
# Callback to handle _entry_1 widget option -validatecommand
#
# ARGS:
#    <NONE>
#
proc spectcl_codebreaker::_entry_1_validatecommand args {}

# spectcl_codebreaker::_entry_1_xscrollcommand --
#
# Callback to handle _entry_1 widget option -xscrollcommand
#
# ARGS:
#    <NONE>
#
proc spectcl_codebreaker::_entry_1_xscrollcommand args {}

# spectcl_codebreaker::_listbox_1_yscrollcommand --
#
# Callback to handle _listbox_1 widget option -yscrollcommand
#
# ARGS:
#    <NONE>
#
proc spectcl_codebreaker::_listbox_1_yscrollcommand args {}

# END CALLBACK CODE

# spectcl_codebreaker::init --
#
#   Call the optional userinit and initialize the dialog.
#   DO NOT EDIT THIS PROCEDURE.
#
# Arguments:
#   root   the root window to load this dialog into
#
# Results:
#   dialog will be created, or a background error will be thrown
#
proc spectcl_codebreaker::init {root args} {
    # Catch this in case the user didn't define it
    catch {spectcl_codebreaker::userinit}
    if {[info exists embed_args]} {
	# we are running in the plugin
	spectcl_codebreaker::ui $root
    } elseif {$::argv0 == [info script]} {
	# we are running in stand-alone mode
	wm title $root spectcl_codebreaker
	if {[catch {
	    # Create the UI
	    spectcl_codebreaker::ui  $root
	} err]} {
	    bgerror $err ; exit 1
	}
    }
    catch {spectcl_codebreaker::run $root}
}

#spectcl_codebreaker::init .

