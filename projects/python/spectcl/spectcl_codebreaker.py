""" spectcl_codebreaker.py --

 UI generated by GUI Builder Build 146 on 2014-09-18 03:50:02 from:
    C:/Users/Public/projects/python_codebreaker/codebreaker/project/02_guibuilder/codebreaker08_spectcl/spectcl_codebreaker.ui
 This file is auto-generated.  Only the code within
    '# BEGIN USER CODE (global|class)'
    '# END USER CODE (global|class)'
 and code inside the callback subroutines will be round-tripped.
 The 'main' function is reserved.
"""

from Tkinter import *
from spectcl_codebreaker_ui import Spectcl_codebreaker

# BEGIN USER CODE global

# END USER CODE global

class CustomSpectcl_codebreaker(Spectcl_codebreaker):
    pass

    # BEGIN CALLBACK CODE
    # ONLY EDIT CODE INSIDE THE def FUNCTIONS.

    # _button_1_command --
    #
    # Callback to handle _button_1 widget option -command
    def _button_1_command(self, *args):
        pass

    # _button_2_command --
    #
    # Callback to handle _button_2 widget option -command
    def _button_2_command(self, *args):
        pass

    # _button_3_command --
    #
    # Callback to handle _button_3 widget option -command
    def _button_3_command(self, *args):
        pass

    # _button_4_command --
    #
    # Callback to handle _button_4 widget option -command
    def _button_4_command(self, *args):
        pass

    # _entry_1_invalidcommand --
    #
    # Callback to handle _entry_1 widget option -invalidcommand
    def _entry_1_invalidcommand(self, *args):
        pass

    # _entry_1_validatecommand --
    #
    # Callback to handle _entry_1 widget option -validatecommand
    def _entry_1_validatecommand(self, *args):
        pass

    # _entry_1_xscrollcommand --
    #
    # Callback to handle _entry_1 widget option -xscrollcommand
    def _entry_1_xscrollcommand(self, *args):
        pass

    # _listbox_1_yscrollcommand --
    #
    # Callback to handle _listbox_1 widget option -yscrollcommand
    def _listbox_1_yscrollcommand(self, *args):
        pass

    # END CALLBACK CODE

    # BEGIN USER CODE class

    # END USER CODE class

def main():
    # Standalone Code Initialization
    # DO NOT EDIT
    try: userinit()
    except NameError: pass
    root = Tk()
    demo = CustomSpectcl_codebreaker(root)
    root.title('spectcl_codebreaker')
    try: run()
    except NameError: pass
    root.protocol('WM_DELETE_WINDOW', root.quit)
    root.mainloop()

if __name__ == '__main__': main()
